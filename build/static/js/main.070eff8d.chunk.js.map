{"version":3,"sources":["init/constants.ts","Pages/Auth/reducer.ts","Pages/Main/reducer.ts","Pages/Details/reducer.ts","init/reducer.ts","init/store.ts","init/hooks.ts","init/unsplashAPI.ts","Pages/Main/actions.ts","modules/PhotoPreview/index.tsx","modules/UserInfo/index.tsx","modules/LikeButton/index.tsx","modules/DateString/index.tsx","Pages/Main/List/index.tsx","Pages/Main/LoadButton/index.tsx","Pages/Main/index.tsx","Pages/Auth/actions.ts","Pages/Details/actions.ts","modules/PhotoFull/index.tsx","Pages/Details/index.tsx","Pages/Auth/index.tsx","Pages/Auth/RedirectPage/index.tsx","App.tsx","index.tsx"],"names":["isLocal","initState","isLoggedIn","Cookies","get","checkAuth","state","reducer","action","type","list","page","isLoading","requestFailed","status","errorMessage","updateLikes","key","photo","newList","likes","liked_by_user","loadList","data","setErrorMessage","message","toggleIsLoading","clearData","undefined","updatePhoto","newState","combineReducers","login","photoList","details","store","createStore","composeWithDevTools","applyMiddleware","thunk","useIsLoggedIn","useSelector","IS_LOCAL","window","location","hostname","unsplash","Unsplash","accessKey","secret","callbackUrl","bearerToken","authenticationUrl","auth","getAuthenticationUrl","errorHandler","code","likePhoto","id","photos","unlikePhoto","isLiked","then","res","ok","toJson","catch","err","failed","json","getPhoto","loadData","i","dispatch","a","perPage","orderBy","listPhotos","likePhotoList","PhotoPreview","el","to","className","src","urls","small","alt","alt_description","UserInfo","user","href","username","target","profile_image","name","LikeButton","useDispatch","onClick","DateString","date","short","newDate","Date","options","day","month","year","dateTime","toLocaleDateString","List","props","bind","this","map","created_at","React","Component","LoadButton","Main","l","query","URLSearchParams","search","hash","replace","remove","likeDetails","PhotoFull","full","Details","useParams","history","useHistory","loadPhoto","goBack","Auth","RedirectPage","url","protocol","port","pathname","userAuthentication","alert","accessToken","access_token","set","App","basename","exact","path","ReactDOM","render","document","querySelector"],"mappings":"yKAG+BA,E,wFCIzBC,EAAwB,CAC5BC,aAAcC,IAAQC,IAAI,0BAGtBC,EAAsC,SAACC,GAAD,mBAAC,eACxCA,GADuC,IAE1CJ,aAAcC,IAAQC,IAAI,4BAUbG,EAPC,WAA4D,IAA3DD,EAA0D,uDAAlDL,EAAWO,EAAuC,uCACzE,OAAQA,EAAOC,MACb,IAAK,aAAc,OAAOJ,EAAUC,GACpC,QAAS,OAAOA,I,QCNdL,EAA6B,CACjCS,KAAM,GACNC,KAAM,EACNC,WAAW,EACXC,cAAe,CACbC,QAAQ,EACRC,aAAc,KAIZC,EAA6C,SAACV,EAAD,EAAmBW,GAAS,IAAlBC,EAAiB,EAAjBA,MACrDC,EAAO,YAAQb,EAAMI,MAI3B,OAHAS,EAAQF,GAAKG,MAAQF,EAAME,MAC3BD,EAAQF,GAAKI,cAAgBH,EAAMG,cAE5B,2BACFf,GADL,IAEEI,KAAMS,KAIJG,EAA0C,SAAChB,EAAOiB,GAAU,IAC3Db,EAAcJ,EAAdI,KAAMC,EAAQL,EAARK,KAGX,OAFAA,IAEO,2BACFL,GADL,IAEEK,KAAMA,EACND,KAAK,GAAD,mBACGA,GADH,YAEGa,IAEPX,WAAW,EACXC,cAAc,2BACTP,EAAMO,eADE,IAEXC,QAAQ,OAKRU,EAAiD,SAAClB,EAAOmB,GAAR,mBAAC,eACnDnB,GADkD,IAErDM,WAAW,EACXC,cAAc,2BACTP,EAAMO,eADE,IAEXC,QAAQ,EACRC,aAAcU,OAIZC,EAAiD,SAAApB,GACrD,OAAO,2BACFA,GADL,IAEEM,WAAW,EACXC,cAAc,2BACTP,EAAMO,eADE,IAEXC,QAAQ,OAeCP,EAVC,WAAiE,IAAhED,EAA+D,uDAAvDL,EAAWO,EAA4C,uCAC9E,OAAQA,EAAOC,MACb,IAAK,aAAc,OAAOO,EAAYV,EAAOE,EAAOe,KAAMf,EAAOS,KACjE,IAAK,YAAa,OAAOK,EAAShB,EAAOE,EAAOe,MAChD,IAAK,aAAc,OAAOG,EAAgBpB,GAC1C,IAAK,iBAAkB,OAAOkB,EAAgBlB,EAAOE,EAAOiB,SAC5D,QAAS,OAAOnB,ICrEdL,EAA2B,CAC/BY,cAAe,CACbC,QAAQ,EACRC,aAAc,KAIZY,EAAyC,SAAArB,GAAK,kCAC/CA,GAD+C,IAElDY,WAAOU,EACPf,cAAe,CACbC,QAAQ,EACRC,aAAc,OAIZc,EAA2C,SAACvB,EAAOiB,GAAR,mBAAC,eAC7CjB,GAD4C,IAE/CY,MAAOK,KAGHP,EAA2C,SAACV,EAAD,GAAuB,IAAbY,EAAY,EAAZA,MACnDY,EAAuB,eACxBxB,GAQL,OALIwB,EAASZ,QACXY,EAASZ,MAAME,MAAQF,EAAME,MAC7BU,EAASZ,MAAMG,cAAgBH,EAAMG,eAGhCS,GAGHN,EAA+C,SAAClB,EAAOmB,GAAR,mBAAC,eACjDnB,GADgD,IAEnDO,cAAc,2BACTP,EAAMO,eADE,IAEXC,QAAQ,EACRC,aAAcU,OAcHlB,EAVC,WAA+D,IAA9DD,EAA6D,uDAArDL,EAAWO,EAA0C,uCAC5E,OAAQA,EAAOC,MACb,IAAK,aAAc,OAAOkB,EAAUrB,GACpC,IAAK,aAAc,OAAOuB,EAAYvB,EAAOE,EAAOe,MACpD,IAAK,aAAc,OAAOP,EAAYV,EAAOE,EAAOe,MACpD,IAAK,iBAAkB,OAAOC,EAAgBlB,EAAOE,EAAOiB,SAC5D,QAAS,OAAOnB,ICtDLyB,4BAAgB,CAC7BC,QACAC,YACAC,YCJWC,EAAQC,sBAAY7B,EAAS8B,8BAAoBC,0BAAgBC,O,sBCDjEC,EAAgB,kBAAMC,aAAY,qBAAGT,MAAsC9B,e,yCCgElFwC,EAAiD,wBAA7BC,OAAOC,SAASC,SAE7BC,EAAW,IAAIC,IAAS,CACnCC,UPvEwB,8COwExBC,OPvEwB,8COwExBC,aPtE6BlD,EOsED0C,EPtEsB1C,EAC9C,yDACA,uDOqEJmD,YAAahD,IAAQC,IAAI,2BAGdgD,EAA4BN,EAASO,KAAKC,qBAAqB,CAC1E,SACA,YACA,aACA,cACA,eACA,gBAGWC,EAAe,SAACC,GAC3B,OAAQA,GACN,KAAK,IACH,MAAO,6KACT,KAAK,IACH,MAAO,oSACT,KAAK,IACH,MAAO,qLACT,KAAK,IACH,MAAO,wMACT,QACE,MAAM,gIAAN,OAAmCA,KAoBnCC,EAA4C,SAACC,GAAD,OAAQZ,EAASa,OAAOF,UAAUC,IAC9EE,EAAgD,SAACF,GAAD,OAAQZ,EAASa,OAAOC,YAAYF,IAE7E1C,EAAc,SAAC0C,EAAYG,GAGtC,OAFeA,EAAUD,EAAcH,GAEzBC,GAAII,MAAK,SAAAC,GACrB,OAAKA,EAAIC,GAKFC,iBAAOF,GAAKG,OAAM,SAACC,GAAD,MAAkB,CACzCC,QAAQ,EACR3C,QAAS0C,MACPL,MAAK,SAACO,GAAD,OAAyBA,KARd,CAClBD,QAAQ,EACR3C,QAAS8B,EAAaQ,EAAIjD,aAUnBwD,EAA0C,SAACZ,GAAD,OACrDZ,EAASa,OAAOW,SAASZ,GAAII,MAAK,SAAAC,GAEhC,OAAKA,EAAIC,GAKFC,iBAAOF,GAAKG,OAAM,SAACC,GAAD,MAAkB,CACzCC,QAAQ,EACR3C,QAAS0C,MACPL,MAAK,SAACO,GAAD,OAAeA,KARJ,CAClBD,QAAQ,EACR3C,QAAS8B,EAAaQ,EAAIjD,aC1InByD,EAAyB,SAACC,GAAD,8CACpC,WAAgBC,GAAhB,eAAAC,EAAA,6DAEED,EAAS,CACPhE,KAAM,eAHV,SDkGCE,IC5FwC6D,ED4FlCG,EC5FqC,GD4F5BC,EC5FgC,SD8F9C9B,EAASa,OAAOkB,WAAWlE,EAAMgE,EAASC,GAASd,MAAK,SAAAC,GAEtD,OAAKA,EAAIC,GAKFC,iBAAOF,GAAKG,OAAM,SAACC,GAAD,MAAkB,CACzCC,QAAQ,EACR3C,QAAS0C,MACPL,MAAK,SAACO,GAAD,OAAuBA,KARZ,CAClBD,QAAQ,EACR3C,QAAS8B,EAAaQ,EAAIjD,YCxGhC,QAMQS,EANR,QAQW6C,OACPK,EAAS,CACPhE,KAAM,iBACNgB,QAASF,EAAKE,UAIhBgD,EAAS,CACPhE,KAAM,YACNc,KAAMA,IAjBZ,iCDkGA,IAACZ,EAAMgE,EAASC,IClGhB,OADoC,uDAuBzBE,EAA8B,SAACpB,EAAYG,EAAkB5C,GAA/B,8CACzC,WAAgBwD,GAAhB,eAAAC,EAAA,sEAE4B1D,EAAY0C,EAAIG,GAF5C,QAEQtC,EAFR,QAIW6C,OACPK,EAAS,CACPhE,KAAM,iBACNgB,QAASF,EAAKE,UAIhBgD,EAAS,CACPhE,KAAM,aACNc,KAAMA,EACNN,IAAKA,IAdX,2CADyC,uD,0CCZ5B8D,GANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAH,OACnB,kBAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAGtB,KACrB,yBAAKwB,UAAU,MAAMC,IAAKH,EAAGI,KAAKC,MAAOC,IAAKN,EAAGO,oBCItCC,GAPE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,uBAAGC,KAAI,gCAA2BD,EAAKE,UAAYC,OAAO,WACxD,yBAAKT,IAAKM,EAAKI,cAAcR,MAAOC,IAAKG,EAAKK,OAC9C,8BAAOL,EAAKK,QCaDC,GAZI,SAAC,GAAsC,IAAD,IAAnCvB,SAAmC,MAA/B,EAA+B,EAA5BQ,EAA4B,EAA5BA,GAAIxE,EAAwB,EAAxBA,OACzBiE,EAAWuB,cACTtC,EAA6BsB,EAA7BtB,GAAItC,EAAyB4D,EAAzB5D,MAAOC,EAAkB2D,EAAlB3D,cAEnB,OACI,6BACE,4BAAQ4E,QAAS,kBAAMxB,EAASjE,EAAOkD,EAAIrC,EAAemD,OAC1D,8BAAOpD,KCJA8E,GAPI,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MACpBC,EAAU,IAAIC,KAAKH,GACnBI,EAAUH,EAAQ,CAACI,IAAK,UAAWC,MAAO,UAAWC,KAAM,WAAa,CAACF,IAAK,UAAWC,MAAO,OAAQC,KAAM,WAEpH,OAAO,0BAAMC,SAAUR,GAAOE,EAAQO,mBAAmB,QAASL,KC+CrDM,G,oDApCb,WAAmBC,GAAmB,IAAD,8BACnC,cAAMA,IAHStG,YAEoB,EAEnC,EAAKA,OAASsG,EAAMtG,OAAOuG,KAAb,gBAFqB,E,gEAM9BC,KAAKF,MAAMnG,MAAMqG,KAAKxG,OAAO,K,+BAIlC,OAAOwG,KAAKF,MAAMjG,cAAcC,OAAS,qHAAqBkG,KAAKF,MAAMjG,cAAcE,cACnF,4BAEIiG,KAAKF,MAAMpG,KAAKuG,KAAI,SAACjC,EAAIR,GAAL,OAEZ,wBAAIvD,IAAKuD,GACP,6BACE,kBAAC,GAAD,CAAUiB,KAAMT,EAAGS,OACnB,kBAAC,GAAD,CACEjB,EAAGA,EACHQ,GAAIA,EACJxE,OAAQsE,KAEZ,kBAAC,GAAD,CAAcE,GAAIA,IAClB,6BACE,kBAAC,GAAD,CAAYmB,KAAMnB,EAAGkC,WAAYd,OAAO,c,GA5B7Ce,IAAMC,WCGVC,GAdI,SAAC,GAAyB,IAAvB1G,EAAsB,EAAtBA,KACd8D,EAAWuB,cAEjB,OACE,4BACEd,UAAU,YACVe,QAAS,WACPxB,EAASF,EAAS5D,MAHtB,iFC+BW2G,GAhCF,WACX,IAAMC,EAAI5E,OAAOC,SACX4E,EAAQ,IAAIC,gBAAgBF,EAAEG,QAAQtH,IAAI,eAC1CuH,EAAOJ,EAAEI,KAETlD,EAAWuB,cACX9F,EAAasC,IACbP,EAAYQ,aAAY,qBAAGR,aAEzBtB,EAAyCsB,EAAzCtB,KAAMC,EAAmCqB,EAAnCrB,UAAWC,EAAwBoB,EAAxBpB,cAAeH,EAASuB,EAATvB,KAExC,OAAO8G,EAAQ,kBAAC,IAAD,CAAUvC,GAAIuC,EAAMI,QAAQ,SAAU,KAAOD,IAAYzH,EACpE,yBAAKgF,UAAU,WACb,4BAAQe,QAAS,kBAAMxB,GCZ7BtE,IAAQ0H,OAAO,yBAER,CACLpH,KAAM,kBDSF,kCAGA,kBAAC,GAAD,CACIC,KAAMA,EACNG,cAAeA,EACfF,KAAMA,EACNH,OAAQ,SAACgE,GAAD,OAAOC,EAASF,EAASC,OAEnC5D,EACI,yBAAKsE,UAAU,gBAAf,uDAGE,kBAAC,GAAD,CAAYvE,KAAMA,KAfqD,kBAAC,IAAD,CAAUsE,GAAG,WEIvF6C,GAA4B,SAACpE,EAAYG,GAAb,8CACvC,WAAgBY,GAAhB,eAAAC,EAAA,sEAE4B1D,EAAY0C,EAAIG,GAF5C,QAEQtC,EAFR,QAIW6C,OACPK,EAAS,CACPhE,KAAM,iBACNgB,QAASF,EAAKE,UAIhBgD,EAAS,CACPhE,KAAM,aACNc,KAAMA,IAbZ,2CADuC,uDCb1BwG,GANG,SAAC,GAAD,IAAG7G,EAAH,EAAGA,MAAH,OAA2BA,EAC3C,6BACE,yBAAKiE,IAAKjE,EAAMkE,KAAK4C,KAAM1C,IAAKpE,EAAMqE,mBAFW,qFC+CtC0C,GAvCC,WAAO,IACbvE,EAAOwE,cAAPxE,GACFyE,EAAUC,cACV9H,EAAQmC,aAAY,qBAAGP,WACvBuC,EAAWuB,cAET9E,EAAyBZ,EAAzBY,MAAOL,EAAkBP,EAAlBO,cAQf,OANKK,GAAUL,EAAcC,OAElBI,GAASA,EAAMwC,KAAOA,GAC/Be,EFvBsC,CACxChE,KAAM,eEoBJgE,EFjBmC,SAACf,GAAD,8CACrC,WAAgBe,GAAhB,eAAAC,EAAA,sEAE4BJ,EAASZ,GAFrC,QAEQnC,EAFR,QAIW6C,OACPK,EAAS,CACPhE,KAAM,iBACNgB,QAASF,EAAKE,UAIhBgD,EAAS,CACPhE,KAAM,aACNc,KAAMA,IAbZ,2CADqC,sDEiB1B8G,CAAU3E,IAMnB,6BACE,4BAAQuC,QAASkC,EAAQG,QAAzB,kCAEEzH,EAAcC,OACZ,oLAC+BD,EAAcE,cAE3C,kBAAC,GAAD,CAAWG,MAAOA,IAGtBA,GACE,6BACE,kBAAC,GAAD,CAAUuE,KAAMvE,EAAMuE,OACtB,wHACmB,kBAAC,GAAD,CAAYU,KAAMjF,EAAMgG,WAAYd,OAAO,KAE9D,kBAAC,GAAD,CAAYpB,GAAI9D,EAAOV,OAAQsH,QC9B5BS,GAXF,kBAAM/F,IAAkB,kBAAC,IAAD,CAAUyC,GAAG,MAC9C,6BACE,qUAGA,4BAAQgB,QAAS,kBAAMtD,OAAOC,SAASgF,QAAQxE,KAA/C,oCCgCSoF,GA3BM,WACnB,IAAM/D,EAAWuB,cAEXuB,EAAI5E,OAAOC,SACX6F,EAAMlB,EAAEmB,SAAW,KAAOnB,EAAE1E,UAAY0E,EAAEoB,KAAO,IAAMpB,EAAEoB,KAAO,IAAMpB,EAAEqB,SAAShB,QAAQ,YAAa,KACtGpE,EAAO,IAAIiE,gBAAgBF,EAAEG,QAAQtH,IAAI,QAE/C,OAAKoD,GAELV,EAASO,KAAKwF,mBAAmBrF,GAAMM,MAAK,SAAAC,GAM1C,OALKA,EAAIC,KACP8E,MAAM,yCAAD,OAAYvF,EAAaQ,EAAIjD,UAClCyG,EAAEK,QAAQa,IAGLxE,iBAAOF,GAAKG,OAAM,SAACC,GACxB2E,MAAM,yCAAD,OAAY3E,IACjBoD,EAAEK,QAAQa,MACT3E,MAAK,SAACO,GL9BiB,IAAC0E,EK+BrB1E,EAAK2E,cAAcvE,GL/BEsE,EK+Ba1E,EAAK2E,aL9B/C7I,IAAQ8I,IAAI,wBAAyBF,GAE9B,CACLtI,KAAM,gBK4BJ8G,EAAEK,QAAQa,SAIP,gIAjBW,kBAAC,IAAD,CAAUxD,GAAG,OCMlBiE,GAnBH,kBACR,kBAAC,IAAD,CAAQC,SAAS,oBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAChB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAChB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,KAChB,kBAAC,GAAD,UChBVC,IAASC,OACL,kBAAC,IAAD,CAAUpH,MAAOA,GACf,kBAAC,GAAD,OAEFqH,SAASC,cAAc,Y","file":"static/js/main.070eff8d.chunk.js","sourcesContent":["export const ACCESS_KEY = \"ANOEv2G8HQvmAGeNpKS1ERxGz7-1G5f91mH8sNyo4nk\";\r\nexport const SECRET_KEY = \"t42Xnafrq9i6jjvGmCt82qTAJ1PLW2DXQ74FOUElgAg\";\r\n\r\nexport const setRedirectUrl = (isLocal: boolean) => isLocal\r\n    ? \"http://superclaw.ddns.net:3000/phoiewer/build/redirect\"\r\n    : \"https://superclaw.github.io/phoiewer/build/redirect\";\r\n","import Cookies from \"js-cookie\";\r\nimport { TActionReturns, TReducerFunc } from \"../../init/types\";\r\n\r\nexport type TAuthState = {\r\n  readonly isLoggedIn: boolean;\r\n};\r\n\r\nconst initState: TAuthState = {\r\n  isLoggedIn: !!Cookies.get('unsplash_access_token'),\r\n};\r\n\r\nconst checkAuth: TReducerFunc<TAuthState> = (state) => ({\r\n  ...state,\r\n  isLoggedIn: !!Cookies.get('unsplash_access_token'),\r\n});\r\n\r\nconst reducer = (state = initState, action: TActionReturns): TAuthState => {\r\n  switch (action.type) {\r\n    case 'CHECK_AUTH': return checkAuth(state);\r\n    default: return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import { TActionReturns, TReducerFunc } from \"../../init/types\";\r\nimport { TPhotosList } from \"../../init/unsplashAPI\";\r\n\r\nexport type TPhotoListState = {\r\n  list: TPhotosList;\r\n  page: number;\r\n  isLoading: boolean;\r\n  requestFailed: {\r\n    status: boolean;\r\n    errorMessage: string;\r\n  };\r\n};\r\n\r\nconst initState: TPhotoListState = {\r\n  list: [],\r\n  page: 0,\r\n  isLoading: false,\r\n  requestFailed: {\r\n    status: false,\r\n    errorMessage: '',\r\n  },\r\n};\r\n\r\nconst updateLikes: TReducerFunc<TPhotoListState> = (state, { photo }, key) => {\r\n  const newList = [ ...state.list ];\r\n  newList[key].likes = photo.likes;\r\n  newList[key].liked_by_user = photo.liked_by_user;\r\n\r\n  return {\r\n    ...state,\r\n    list: newList,\r\n  };\r\n}\r\n\r\nconst loadList: TReducerFunc<TPhotoListState> = (state, data) => {\r\n  let {list, page} = state;\r\n  page++;\r\n\r\n  return {\r\n    ...state,\r\n    page: page,\r\n    list: [\r\n        ...list,\r\n        ...data,\r\n    ],\r\n    isLoading: false,\r\n    requestFailed: {\r\n      ...state.requestFailed,\r\n      status: false,\r\n    },\r\n  };\r\n};\r\n\r\nconst setErrorMessage: TReducerFunc<TPhotoListState> = (state, message) => ({\r\n  ...state,\r\n  isLoading: false,\r\n  requestFailed: {\r\n    ...state.requestFailed,\r\n    status: true,\r\n    errorMessage: message,\r\n  },\r\n});\r\n\r\nconst toggleIsLoading: TReducerFunc<TPhotoListState> = state => {\r\n  return {\r\n    ...state,\r\n    isLoading: true,\r\n    requestFailed: {\r\n      ...state.requestFailed,\r\n      status: false,\r\n    },\r\n  };\r\n};\r\n\r\nconst reducer = (state = initState, action: TActionReturns): TPhotoListState => {\r\n  switch (action.type) {\r\n    case 'LIKE_PHOTO': return updateLikes(state, action.data, action.key);\r\n    case 'LOAD_NEXT': return loadList(state, action.data);\r\n    case 'IS_LOADING': return toggleIsLoading(state);\r\n    case 'REQUEST_FAILED': return setErrorMessage(state, action.message);\r\n    default: return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { TActionReturns, TReducerFunc } from \"../../init/types\";\r\nimport { TPhoto } from \"../../init/unsplashAPI\";\r\n\r\nexport type TDetailsState = {\r\n  photo?: TPhoto;\r\n  requestFailed: {\r\n    status: boolean;\r\n    errorMessage: string;\r\n  };\r\n};\r\n\r\nconst initState: TDetailsState = {\r\n  requestFailed: {\r\n    status: false,\r\n    errorMessage: '',\r\n  },\r\n};\r\n\r\nconst clearData: TReducerFunc<TDetailsState> = state => ({\r\n  ...state,\r\n  photo: undefined,\r\n  requestFailed: {\r\n    status: false,\r\n    errorMessage: '',\r\n  },\r\n});\r\n\r\nconst updatePhoto: TReducerFunc<TDetailsState> = (state, data) => ({\r\n  ...state,\r\n  photo: data,\r\n});\r\n\r\nconst updateLikes: TReducerFunc<TDetailsState> = (state, { photo }) => {\r\n  const newState: TDetailsState = {\r\n    ...state,\r\n  };\r\n\r\n  if (newState.photo) {\r\n    newState.photo.likes = photo.likes;\r\n    newState.photo.liked_by_user = photo.liked_by_user;\r\n  }\r\n\r\n  return newState;\r\n};\r\n\r\nconst setErrorMessage: TReducerFunc<TDetailsState> = (state, message) => ({\r\n  ...state,\r\n  requestFailed: {\r\n    ...state.requestFailed,\r\n    status: true,\r\n    errorMessage: message,\r\n  },\r\n});\r\n\r\nconst reducer = (state = initState, action: TActionReturns): TDetailsState => {\r\n  switch (action.type) {\r\n    case 'CLEAR_DATA': return clearData(state);\r\n    case 'LOAD_PHOTO': return updatePhoto(state, action.data);\r\n    case 'LIKE_PHOTO': return updateLikes(state, action.data);\r\n    case 'REQUEST_FAILED': return setErrorMessage(state, action.message);\r\n    default: return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport login from \"../Pages/Auth/reducer\";\r\nimport photoList from \"../Pages/Main/reducer\";\r\nimport details from \"../Pages/Details/reducer\";\r\n\r\nexport default combineReducers({\r\n  login,\r\n  photoList,\r\n  details,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension/index\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducer\";\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import { useSelector } from \"react-redux\";\r\nimport { TState } from \"./types\";\r\nimport { TAuthState } from \"../Pages/Auth/reducer\";\r\n\r\nexport const useIsLoggedIn = () => useSelector(({ login }: TState<TAuthState>) => login.isLoggedIn);\r\n","import Unsplash, { UnsplashApi } from \"unsplash-js\";\r\nimport { toJson } from \"unsplash-js\";\r\nimport Cookies from \"js-cookie\";\r\nimport { ACCESS_KEY, SECRET_KEY, setRedirectUrl } from \"./constants\";\r\n\r\nexport type TUser = {\r\n  accepted_tos: boolean;\r\n  bio: string | null;\r\n  first_name: string;\r\n  id: string;\r\n  instagram_username: string | null;\r\n  last_name: string | null;\r\n  links: {\r\n    [n: string]: string;\r\n  };\r\n  location: string | null;\r\n  name: string;\r\n  portfolio_url: string | null;\r\n  profile_image: {\r\n    large: string;\r\n    medium: string;\r\n    small: string;\r\n  };\r\n  total_collection: number;\r\n  total_likes: number;\r\n  total_photos: number;\r\n  twitter_username: string | null;\r\n  updated_at: string;\r\n  username: string;\r\n};\r\n\r\nexport type TPhoto = {\r\n  alt_description: any;\r\n  categories: any[];\r\n  color: string | null;\r\n  created_at: string;\r\n  current_user_collection: any[];\r\n  description: string | null;\r\n  height: number;\r\n  id: string;\r\n  liked_by_user: boolean;\r\n  likes: number;\r\n  links: {\r\n    [n: string]: string;\r\n  };\r\n  promoted_at: string | null;\r\n  sponsorship: {\r\n    [n: string]: any;\r\n  };\r\n  updated_at: string;\r\n  urls: {\r\n    full: string;\r\n    raw: string;\r\n    regular: string;\r\n    small: string;\r\n    thumb: string;\r\n  };\r\n  user: TUser;\r\n  width: number;\r\n};\r\n\r\nexport type TPhotosList = TPhoto[];\r\n\r\nexport type TLikeResponse = {\r\n  photo: TPhoto;\r\n  user: TUser;\r\n};\r\n\r\nconst IS_LOCAL: boolean = window.location.hostname !== 'superclaw.github.io';\r\n\r\nexport const unsplash = new Unsplash({\r\n  accessKey: ACCESS_KEY,\r\n  secret: SECRET_KEY,\r\n  callbackUrl: setRedirectUrl(IS_LOCAL),\r\n  bearerToken: Cookies.get('unsplash_access_token'),\r\n});\r\n\r\nexport const authenticationUrl: string = unsplash.auth.getAuthenticationUrl([\r\n  \"public\",\r\n  \"read_user\",\r\n  \"write_user\",\r\n  \"read_photos\",\r\n  \"write_photos\",\r\n  \"write_likes\",\r\n]);\r\n\r\nexport const errorHandler = (code: number): string => {\r\n  switch (code) {\r\n    case 400:\r\n      return 'Код авторизации недействителен';\r\n    case 401:\r\n      return 'Вы не авторизованы или срок действия авторизации истёк';\r\n    case 403:\r\n      return 'Превышен лимит запросов на сервер';\r\n    case 404:\r\n      return 'Не удалось получить данные по запросу';\r\n    default:\r\n      return `Неизвестная ошибка, код: ${code}`;\r\n  }\r\n};\r\n\r\nexport const listPhotos: UnsplashApi.Photo['listPhotos'] =\r\n  (page, perPage, orderBy) =>\r\n\r\n    unsplash.photos.listPhotos(page, perPage, orderBy).then(res => {\r\n\r\n      if (!res.ok) return {\r\n        failed: true,\r\n        message: errorHandler(res.status),\r\n      }\r\n\r\n      return toJson(res).catch((err: string) => ({\r\n        failed: true,\r\n        message: err,\r\n      })).then((json: TPhotosList) => json);\r\n    });\r\n\r\nconst likePhoto: UnsplashApi.Photo['likePhoto'] = (id) => unsplash.photos.likePhoto(id);\r\nconst unlikePhoto: UnsplashApi.Photo['unlikePhoto'] = (id) => unsplash.photos.unlikePhoto(id);\r\n\r\nexport const updateLikes = (id: string, isLiked: boolean) => {\r\n  const action = isLiked ? unlikePhoto : likePhoto;\r\n\r\n  return action(id).then(res => {\r\n    if (!res.ok) return {\r\n      failed: true,\r\n      message: errorHandler(res.status),\r\n    }\r\n\r\n    return toJson(res).catch((err: string) => ({\r\n      failed: true,\r\n      message: err,\r\n    })).then((json: TLikeResponse) => json);\r\n  });\r\n};\r\n\r\nexport const getPhoto: UnsplashApi.Photo['getPhoto'] = (id) =>\r\n  unsplash.photos.getPhoto(id).then(res => {\r\n\r\n    if (!res.ok) return {\r\n      failed: true,\r\n      message: errorHandler(res.status),\r\n    }\r\n\r\n    return toJson(res).catch((err: string) => ({\r\n      failed: true,\r\n      message: err,\r\n    })).then((json: any) => json);\r\n  });\r\n","import { listPhotos, updateLikes } from \"../../init/unsplashAPI\";\r\nimport { TAsyncAction, TData } from \"../../init/types\";\r\n\r\nexport const loadData: TAsyncAction = (i: number) =>\r\n  async function (dispatch) {\r\n\r\n    dispatch({\r\n      type: 'IS_LOADING',\r\n    });\r\n\r\n    const data: TData = await listPhotos(++i, 15, \"latest\");\r\n\r\n    if (data.failed) {\r\n      dispatch({\r\n        type: 'REQUEST_FAILED',\r\n        message: data.message,\r\n      });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: 'LOAD_NEXT',\r\n        data: data,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const likePhotoList: TAsyncAction = (id: string, isLiked: boolean, key: number) =>\r\n  async function (dispatch) {\r\n\r\n    const data: TData = await updateLikes(id, isLiked);\r\n\r\n    if (data.failed) {\r\n      dispatch({\r\n        type: 'REQUEST_FAILED',\r\n        message: data.message,\r\n      });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: 'LIKE_PHOTO',\r\n        data: data,\r\n        key: key,\r\n      });\r\n    }\r\n  };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TPhoto } from \"../../init/unsplashAPI\";\r\n\r\ntype PropsType = {\r\n  el: TPhoto;\r\n};\r\n\r\nconst PhotoPreview = ({ el }: PropsType) => (\r\n  <Link to={`/photo-${el.id}`}>\r\n    <img className=\"img\" src={el.urls.small} alt={el.alt_description} />\r\n  </Link>\r\n);\r\n\r\nexport default PhotoPreview;\r\n","import React from \"react\";\r\nimport { TUser } from \"../../init/unsplashAPI\";\r\n\r\ntype PropTypes = {\r\n  user: TUser;\r\n};\r\n\r\nconst UserInfo = ({ user }: PropTypes) => (\r\n  <a href={`https://unsplash.com/@${user.username}`} target=\"__blank\">\r\n    <img src={user.profile_image.small} alt={user.name} />\r\n    <span>{user.name}</span>\r\n  </a>\r\n);\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TAsyncAction } from \"../../init/types\";\r\nimport { TPhoto } from \"../../init/unsplashAPI\";\r\n\r\ntype PropsType = {\r\n  i?: number;\r\n  el: TPhoto;\r\n  action: TAsyncAction;\r\n};\r\n\r\nconst LikeButton = ({ i = 0, el, action }: PropsType) => {\r\n  const dispatch = useDispatch();\r\n  const { id, likes, liked_by_user } = el;\r\n\r\n  return (\r\n      <div>\r\n        <button onClick={() => dispatch(action(id, liked_by_user, i))}/>\r\n        <span>{likes}</span>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default LikeButton;\r\n","import React from \"react\";\r\n\r\ntype PropsType = {\r\n  date: string;\r\n  short: boolean;\r\n};\r\n\r\nconst DateString = ({ date, short }: PropsType) => {\r\n  const newDate = new Date(date);\r\n  const options = short ? {day: 'numeric', month: '2-digit', year: '2-digit'} : {day: 'numeric', month: 'long', year: 'numeric'};\r\n\r\n  return <time dateTime={date}>{newDate.toLocaleDateString('ru-RU', options)}</time>;\r\n}\r\n\r\nexport default DateString;\r\n","import React from \"react\";\r\nimport { likePhotoList } from \"../actions\";\r\nimport { TAsyncAction } from \"../../../init/types\";\r\nimport { TPhotosList } from \"../../../init/unsplashAPI\";\r\nimport PhotoPreview from \"../../../modules/PhotoPreview\";\r\nimport UserInfo from \"../../../modules/UserInfo\";\r\nimport LikeButton from \"../../../modules/LikeButton\";\r\nimport DateString from \"../../../modules/DateString\";\r\n\r\ntype PropsType = {\r\n  action: TAsyncAction;\r\n  list: TPhotosList;\r\n  page: number;\r\n  requestFailed: {\r\n    status: boolean;\r\n    errorMessage: string;\r\n  };\r\n};\r\n\r\nclass List extends React.Component<PropsType> {\r\n  private readonly action: TAsyncAction;\r\n\r\n  public constructor(props: PropsType) {\r\n    super(props);\r\n    this.action = props.action.bind(this);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    if (!this.props.page) this.action(0);\r\n  }\r\n\r\n  public render() {\r\n    return this.props.requestFailed.status ? <p>Ошибка загрузки: {this.props.requestFailed.errorMessage}</p> : (\r\n        <ul>\r\n          {\r\n            this.props.list.map((el, i) =>\r\n                (\r\n                    <li key={i}>\r\n                      <div>\r\n                        <UserInfo user={el.user} />\r\n                        <LikeButton\r\n                          i={i}\r\n                          el={el}\r\n                          action={likePhotoList} />\r\n                      </div>\r\n                      <PhotoPreview el={el} />\r\n                      <div>\r\n                        <DateString date={el.created_at} short={true} />\r\n                      </div>\r\n                    </li>\r\n                )\r\n            )\r\n          }\r\n        </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loadData } from \"../actions\";\r\n\r\ntype PropsType = {\r\n  page: number;\r\n};\r\n\r\nconst LoadButton = ({ page }: PropsType) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <button\r\n      className=\"load-next\"\r\n      onClick={() => {\r\n        dispatch(loadData(page));\r\n      }}>\r\n      Загрузить ещё...\r\n    </button>\r\n  )\r\n};\r\n\r\nexport default LoadButton;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useIsLoggedIn } from \"../../init/hooks\";\r\nimport { loadData } from \"./actions\";\r\nimport { logOut } from \"../Auth/actions\";\r\nimport { TState} from \"../../init/types\";\r\nimport { TPhotoListState } from \"./reducer\";\r\nimport List from \"./List\";\r\nimport LoadButton from \"./LoadButton\";\r\n\r\nconst Main = () => {\r\n  const l = window.location;\r\n  const query = new URLSearchParams(l.search).get('redirect_to');\r\n  const hash = l.hash;\r\n\r\n  const dispatch = useDispatch();\r\n  const isLoggedIn = useIsLoggedIn();\r\n  const photoList = useSelector(({ photoList }: TState<TPhotoListState>) => photoList);\r\n\r\n  const { page, isLoading, requestFailed, list } = photoList;\r\n\r\n  return query ? <Redirect to={query.replace(/~and~/g, '&') + hash} /> : !isLoggedIn ? <Redirect to=\"/auth\" /> : (\r\n      <div className=\"wrapper\">\r\n        <button onClick={() => dispatch(logOut())}>\r\n          Выйти\r\n        </button>\r\n        <List\r\n            list={list}\r\n            requestFailed={requestFailed}\r\n            page={page}\r\n            action={(i) => dispatch(loadData(i))} />\r\n        {\r\n          isLoading ? (\r\n              <div className=\"loading-icon\">\r\n                Загрузка...\r\n              </div>\r\n            ) : <LoadButton page={page} />\r\n        }\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import Cookies from \"js-cookie\";\r\nimport { TAction } from \"../../init/types\";\r\n\r\nexport const logIn: TAction = (accessToken: string) => {\r\n  Cookies.set('unsplash_access_token', accessToken);\r\n\r\n  return {\r\n    type: 'CHECK_AUTH',\r\n  };\r\n};\r\n\r\nexport const logOut: TAction = () => {\r\n  Cookies.remove('unsplash_access_token');\r\n\r\n  return {\r\n    type: 'CHECK_AUTH',\r\n  };\r\n};\r\n","import { getPhoto, updateLikes } from \"../../init/unsplashAPI\";\r\nimport { TAction, TAsyncAction, TData } from \"../../init/types\";\r\n\r\nexport const clearPhoto: TAction = () => ({\r\n  type: 'CLEAR_DATA',\r\n});\r\n\r\nexport const loadPhoto: TAsyncAction = (id: string) =>\r\n  async function (dispatch) {\r\n\r\n    const data: TData = await getPhoto(id);\r\n\r\n    if (data.failed) {\r\n      dispatch({\r\n        type: 'REQUEST_FAILED',\r\n        message: data.message,\r\n      });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: 'LOAD_PHOTO',\r\n        data: data,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const likeDetails: TAsyncAction = (id: string, isLiked: boolean) =>\r\n  async function (dispatch) {\r\n\r\n    const data: TData = await updateLikes(id, isLiked);\r\n\r\n    if (data.failed) {\r\n      dispatch({\r\n        type: 'REQUEST_FAILED',\r\n        message: data.message,\r\n      });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: 'LIKE_PHOTO',\r\n        data: data,\r\n      });\r\n    }\r\n  };\r\n","import React from \"react\";\r\nimport { TPhoto } from \"../../init/unsplashAPI\";\r\n\r\ntype PropsType = {\r\n  photo: TPhoto | undefined;\r\n};\r\n\r\nconst PhotoFull = ({ photo }: PropsType) => !photo ? <div>Загрузка...</div> : (\r\n  <div>\r\n    <img src={photo.urls.full} alt={photo.alt_description} />\r\n  </div>\r\n);\r\n\r\nexport default PhotoFull;\r\n","import React from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { clearPhoto, loadPhoto, likeDetails } from \"./actions\";\r\nimport { TState } from \"../../init/types\";\r\nimport { TDetailsState } from \"./reducer\";\r\nimport PhotoFull from \"../../modules/PhotoFull\";\r\nimport UserInfo from \"../../modules/UserInfo\";\r\nimport DateString from \"../../modules/DateString\";\r\nimport LikeButton from \"../../modules/LikeButton\";\r\n\r\ntype ParamsType = {\r\n  id: string;\r\n};\r\n\r\nconst Details = () => {\r\n  const { id } = useParams<ParamsType>();\r\n  const history = useHistory();\r\n  const state = useSelector(({ details }: TState<TDetailsState>) => details);\r\n  const dispatch = useDispatch();\r\n\r\n  const { photo, requestFailed } = state;\r\n\r\n  if (!photo && !requestFailed.status) {\r\n    dispatch(loadPhoto(id));\r\n  } else if (photo && photo.id !== id) {\r\n    dispatch(clearPhoto());\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={history.goBack}>Назад</button>\r\n      {\r\n        requestFailed.status ? (\r\n          <div>\r\n            Ошибка загрузки фотографии: {requestFailed.errorMessage}\r\n          </div>\r\n        ) : <PhotoFull photo={photo} />\r\n      }\r\n      {\r\n        photo && (\r\n          <div>\r\n            <UserInfo user={photo.user} />\r\n            <span>\r\n              Дата публикации: <DateString date={photo.created_at} short={false} />\r\n            </span>\r\n            <LikeButton el={photo} action={likeDetails} />\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { authenticationUrl } from \"../../init/unsplashAPI\";\r\nimport { useIsLoggedIn } from \"../../init/hooks\";\r\n\r\nconst Auth = () => useIsLoggedIn() ? <Redirect to=\"/\" /> : (\r\n    <div>\r\n      <p>\r\n        Для просмотра этой страницы необходимо авторизоваться.\r\n      </p>\r\n      <button onClick={() => window.location.replace(authenticationUrl)}>\r\n        Войти\r\n      </button>\r\n    </div>\r\n);\r\n\r\nexport default Auth;\r\n","import React from \"react\";\r\nimport { unsplash, errorHandler } from \"../../../init/unsplashAPI\";\r\nimport { toJson } from \"unsplash-js\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { logIn } from \"../actions\";\r\n\r\ntype TAccessToken = {\r\n  access_token: string;\r\n  created_at: number;\r\n  refresh_token: string;\r\n  scope: string;\r\n  token_type: string;\r\n};\r\n\r\nconst RedirectPage = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const l = window.location;\r\n  const url = l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') + l.pathname.replace('/redirect', '/');\r\n  const code = new URLSearchParams(l.search).get('code');\r\n\r\n  if (!code) return <Redirect to=\"/\" />;\r\n\r\n  unsplash.auth.userAuthentication(code).then(res => {\r\n    if (!res.ok) {\r\n      alert(`Ошибка: ${errorHandler(res.status)}`);\r\n      l.replace(url);\r\n    }\r\n\r\n    return toJson(res).catch((err: string) => {\r\n      alert(`Ошибка: ${err}`);\r\n      l.replace(url);\r\n    }).then((json: TAccessToken) => {\r\n      if (json.access_token) dispatch(logIn(json.access_token));\r\n      l.replace(url);\r\n    });\r\n  });\r\n\r\n  return <div>Идёт авторизация...</div>;\r\n};\r\n\r\nexport default RedirectPage;\r\n","import \"./index.scss\";\r\nimport React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Main from \"./Pages/Main\";\r\nimport Details from \"./Pages/Details\";\r\nimport Auth from \"./Pages/Auth\";\r\nimport RedirectPage from \"./Pages/Auth/RedirectPage\";\r\n\r\nconst App = () => (\r\n    <Router basename=\"/phoiewer/build/\">\r\n      <Switch>\r\n        <Route exact path=\"/photo-:id\">\r\n          <Details />\r\n        </Route>\r\n        <Route exact path=\"/auth\">\r\n          <Auth />\r\n        </Route>\r\n        <Route exact path=\"/redirect\">\r\n          <RedirectPage />\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          <Main />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n);\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./init/store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}